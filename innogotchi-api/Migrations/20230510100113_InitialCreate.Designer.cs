// <auto-generated />
using System;
using DataLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClientLayer.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230510100113_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Models.Avatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Avatars");
                });

            modelBuilder.Entity("DataLayer.Models.Collaboration", b =>
                {
                    b.Property<string>("FarmName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("FarmName", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Collaborations");
                });

            modelBuilder.Entity("DataLayer.Models.Farm", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Farms");
                });

            modelBuilder.Entity("DataLayer.Models.FeedingAndQuenching", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FeedingPeriod")
                        .HasColumnType("int");

                    b.Property<DateTime>("FeedingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("InnogotchiName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("QuenchingPeriod")
                        .HasColumnType("int");

                    b.Property<DateTime>("QuenchingTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UnhappyDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InnogotchiName");

                    b.ToTable("FeedingsAndQuenchings");
                });

            modelBuilder.Entity("DataLayer.Models.Innogotchi", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FarmName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.HasIndex("FarmName");

                    b.ToTable("Innogotchis");
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FarmName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("FarmName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataLayer.Models.Collaboration", b =>
                {
                    b.HasOne("DataLayer.Models.Farm", "Farm")
                        .WithMany("Collaborations")
                        .HasForeignKey("FarmName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", "User")
                        .WithMany("Collaborations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Models.FeedingAndQuenching", b =>
                {
                    b.HasOne("DataLayer.Models.Innogotchi", null)
                        .WithMany("FeedingAndQuenchings")
                        .HasForeignKey("InnogotchiName");
                });

            modelBuilder.Entity("DataLayer.Models.Innogotchi", b =>
                {
                    b.HasOne("DataLayer.Models.Farm", null)
                        .WithMany("Innogotchis")
                        .HasForeignKey("FarmName");
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.HasOne("DataLayer.Models.Avatar", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.HasOne("DataLayer.Models.Farm", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmName");

                    b.Navigation("Avatar");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("DataLayer.Models.Farm", b =>
                {
                    b.Navigation("Collaborations");

                    b.Navigation("Innogotchis");
                });

            modelBuilder.Entity("DataLayer.Models.Innogotchi", b =>
                {
                    b.Navigation("FeedingAndQuenchings");
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.Navigation("Collaborations");
                });
#pragma warning restore 612, 618
        }
    }
}
